import React, { useState, useEffect } from 'react';
import axios from 'axios';

function SystemLog() {
  const [logs, setLogs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [autoRefresh, setAutoRefresh] = useState(true);

  const fetchAllNotifications = async () => {
    try {
      // Use the new system monitoring endpoint
      const response = await axios.get(`${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/system/notifications`, {
        params: {
          limit: 200
        }
      });
      
      setLogs(response.data);
      setLoading(false);
    } catch (error) {
      console.error('Error fetching notifications:', error);
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAllNotifications();
    
    let interval;
    if (autoRefresh) {
      interval = setInterval(fetchAllNotifications, 5000); // Refresh every 5 seconds
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [autoRefresh]);

  const formatLogEntry = (notification) => {
    const timestamp = new Date(notification.timestamp).toISOString();
    const severity = notification.severity.toUpperCase().padEnd(8);
    const path = notification.object_path.padEnd(30);
    return `${timestamp} [${severity}] ${path} - ${notification.title}${notification.description ? ' | ' + notification.description : ''}`;
  };

  const getSeverityColor = (severity) => {
    switch (severity.toLowerCase()) {
      case 'error': return 'text-danger';
      case 'warning': return 'text-warning';
      case 'info': return 'text-info';
      default: return 'text-secondary';
    }
  };

  return (
    <div className="container-fluid">
      <div className="row">
        <div className="col-12">
          <div className="d-flex justify-content-between align-items-center mb-3">
            <h2>System Notification Log</h2>
            <div className="d-flex gap-2 align-items-center">
              <div className="form-check form-switch">
                <input
                  className="form-check-input"
                  type="checkbox"
                  id="autoRefresh"
                  checked={autoRefresh}
                  onChange={(e) => setAutoRefresh(e.target.checked)}
                />
                <label className="form-check-label" htmlFor="autoRefresh">
                  Auto-refresh (5s)
                </label>
              </div>
              <button 
                className="btn btn-outline-primary btn-sm"
                onClick={fetchAllNotifications}
                disabled={loading}
              >
                {loading ? 'Loading...' : 'Refresh'}
              </button>
            </div>
          </div>

          <div className="card">
            <div className="card-header d-flex justify-content-between align-items-center">
              <span>Live Event Log ({logs.length} events)</span>
              <small className="text-muted">
                Showing all system notifications generated by the event simulator
              </small>
            </div>
            <div className="card-body p-0">
              <textarea 
                className="form-control bg-dark text-light border-0"
                style={{ 
                  height: '70vh', 
                  fontFamily: 'Monaco, Menlo, "Ubuntu Mono", monospace',
                  fontSize: '12px',
                  lineHeight: '1.5',
                  resize: 'none',
                  outline: 'none'
                }}
                value={loading ? 'Loading system logs...' : logs.length === 0 ? 'No notifications found. The event generator may still be starting up.' : 
                  logs
                    .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
                    .map(notification => formatLogEntry(notification))
                    .join('\n')
                }
                readOnly
              />
            </div>
            <div className="card-footer">
              <div className="row">
                <div className="col-md-3">
                  <small className="text-muted">
                    <span className="text-danger">●</span> ERROR &nbsp;
                    <span className="text-warning">●</span> WARNING &nbsp;
                    <span className="text-info">●</span> INFO
                  </small>
                </div>
                <div className="col-md-9 text-end">
                  <small className="text-muted">
                    Events are generated every 30 seconds by the simulator
                  </small>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default SystemLog;
